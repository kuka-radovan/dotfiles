#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create new directories and enter the first one.

mcd() {
    if [ -n "$*" ]; then

        mkdir -p "$@"
        #      └─ make parent directories if needed

        cd "$@" || exit 1

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Always list directory contents upon 'cd'

cd() {
    builtin cd "$@"; ls -FGlAhp;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Moves a file to the MacOS trash

trash () {
    command mv "$@" ~/.Trash ;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Extract most know archives with one command

extract () {
    if [ -f $1 ] ; then
        case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
            esac
        else
            echo "'$1' is not a valid file"
        fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# find out the pid of a specified process
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user

findPid () {
    lsof -t -c "$@" ;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# List processes owned by my user

myps() {
    ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create zip archive of a file

zipf () {
    zip -r "$1".zip "$1" ;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Download a web page and show info on what took time

httpDebug () {
    /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ;
}
